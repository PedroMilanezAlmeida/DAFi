tryCatch(suppressMessages(library("foreach")),
error = function(e){
install.packages(pkgs =  "foreach",
repos = 'http://cran.us.r-project.org')
suppressMessages(library("foreach"))
})
tryCatch(suppressMessages(library("dplyr")),
error = function(e){
install.packages(pkgs =  "dplyr",
repos = 'http://cran.us.r-project.org')
suppressMessages(library("dplyr"))
})
tryCatch(suppressMessages(library("XML")),
error = function(e){
install.packages(pkgs =  "XML",
repos = 'http://cran.us.r-project.org')
suppressMessages(library("XML"))
})
tryCatch(suppressMessages(library("FlowSOM")),
error = function(e){
if (!requireNamespace("BiocManager",
quietly = TRUE))
install.packages("BiocManager",
repos = 'http://cran.us.r-project.org')
BiocManager::install("FlowSOM",
update = FALSE,
ask = FALSE)
suppressMessages(library("FlowSOM"))
})
tryCatch(suppressMessages(library("flowWorkspace")),
error = function(e){
if (!requireNamespace("BiocManager",
quietly = TRUE))
install.packages("BiocManager",
repos = 'http://cran.us.r-project.org')
BiocManager::install("flowWorkspace",
update = FALSE,
ask = FALSE)
suppressMessages(library("flowWorkspace"))
})
tryCatch(suppressMessages(library("CytoML")),
error = function(e){
if (!requireNamespace("BiocManager",
quietly = TRUE))
install.packages("BiocManager",
repos = 'http://cran.us.r-project.org')
BiocManager::install("CytoML",
update = FALSE,
ask = FALSE)
suppressMessages(library("CytoML"))
})
tryCatch(suppressMessages(library("flowUtils")),
error = function(e){
if (!requireNamespace("BiocManager",
quietly = TRUE))
install.packages("BiocManager",
repos = 'http://cran.us.r-project.org')
BiocManager::install("flowUtils",
update = FALSE,
ask = FALSE)
suppressMessages(library("flowUtils"))
})
populationName <- "DAFi_CD3..CD45.subset"
minPopSize <- 500
## Code to read gates from wsp file
popOfInt <- populationName
popOfInt
#find and load wsp file
wspNames <- dirname(path = "C:/Users/pedro/OneDrive/Desktop/DAFi/14-Jan-2020/DAFi/T4  Monogenic-disease-HC_036-003.DAFi_CD3..CD45.subset.ExtNode.csv") %>%
dirname(path = .) %>%
paste0(.,
".wsp")
wspNames
ws <- openWorkspace(wspNames)
##find raw .fcs files
#find path of all fcs files in workspace
sampleFCS_paths <- xpathApply(ws@doc,
file.path("/Workspace/SampleList/Sample","DataSet"),
function(x)
xmlGetAttr(x,"uri") %>%
gsub(pattern = "%20", replacement = " ", x = .) %>%
gsub(pattern = "file:", replacement = "", x = .)) %>%
unlist
sampleFCS_paths
sampleFCS_names <- sampleFCS_paths %>%
basename(.) %>%
gsub(pattern = ".fcs",
replacement = "",
x = .)
sampleFCS_names
#find name of fcs file used here
nameSearch <- sapply(sampleFCS_names,
function(name)
grep(pattern = name,
x = basename("C:/Users/pedro/OneDrive/Desktop/DAFi/14-Jan-2020/DAFi/T4  Monogenic-disease-HC_036-003.DAFi_CD3..CD45.subset.ExtNode.csv"))) %>%
unlist(.)
nameSearchRes <- names(nameSearch)[nameSearch %>%
names(.) %>%
nchar(.) %>%
which.max(.)]
sampleFCS <- paste0(nameSearchRes,
".fcs")
#sampleFCS <- basename("C:/Users/pedro/OneDrive/Desktop/DAFi/14-Jan-2020/DAFi/T4  Monogenic-disease-HC_036-003.DAFi_CD3..CD45.subset.ExtNode.csv") %>%
#  gsub(pattern = excess.sampleFCS,
#       replacement = "",
#       x = .,
#       fixed = TRUE) %>%
#  paste0(.,
#         ".fcs")
#sampleFCS
#find path to fcs file used here
sampleFCS_path <- sampleFCS_paths[basename(sampleFCS_paths) == sampleFCS]
sampleFCS_path
if(Sys.info()["sysname"] == "Windows"){
sampleFCS_path <- substring(sampleFCS_path, 2)
}
pathFCS <- tryCatch(
data.frame(sampleID = getSamples(ws)$sampleID[getSamples(ws)$name == sampleFCS],
file = sampleFCS_path),
error = function(e) {
FIL <- read.FCS(sampleFCS_path)@description$`$FIL`
data.frame(sampleID = getSamples(ws)$sampleID[getSamples(ws)$name == FIL],
file = sampleFCS_path)
})
gs <- parseWorkspace(ws,
name = 1,
path = pathFCS,
isNcdf = FALSE)
gs
gs[[1]]
getNodes(gs[[1]])
parseWorkspace
showMethods("parseWorkspace")
flowjoWorkspace
?flowjoWorkspace
??flowjoWorkspace
ws
ws@doc
grep("Dafi", x = ws@doc)
grep("DAFi", x = ws@doc)
class(ws@doc)
gs
gs[[1]]
gs[[1]]@data
gs[[1]]@data@phenoData
gs[[1]]@data@phenoData@data
gs[[1]]@data@phenoData@data$name
gs[[1]]@data@phenoData@varMetadata
gs[[1]]@data@phenoData@dimLabels
gs[[1]]@data@phenoData@.__classVersion__
getData(gs[[1]])
